name: mt7621-cr660x-lede-master

on:
  workflow_dispatch:
  schedule:
    - cron: 0 18 * * 5
  # watch:
  #   types: started

env:
  CONFIG_FILE: config/mt7621/cr660x.config
  SOURCE_URL: https://github.com/coolsnowwolf/lede.git
  SOURCE_BRANCH: master
  DIY_SH: scripts/custom.sh
  NET_PLUGIN_SH: scripts/add-network-plugin.sh
  TOOLCHAIN_TAG: toolchain
  CLASH_BINARY_PLATFORM: mt7621
  TOOLCHAIN_RELEASE_UPLOAD: false
  FIRMWARE_RELEASE_UPLOAD: true
  WEB_ROOT_PATH: /data/www/lede
  TZ: Asia/Shanghai

jobs:
  Toolchain:
    runs-on: ubuntu-20.04

    outputs:
      OPENWRT_ROOT_PATH: ${{ steps.clone.outputs.OPENWRT_ROOT_PATH }}
      CURRENT_BRANCH: ${{ steps.env.outputs.CURRENT_BRANCH }}
      SOURCE_OWNER: ${{ steps.env.outputs.SOURCE_OWNER }}
      SOURCE_REPO: ${{ steps.env.outputs.SOURCE_REPO }}
      DEVICE_PLATFORM: ${{ steps.env.outputs.DEVICE_PLATFORM }}
      DEVICE_TARGET: ${{ steps.env.outputs.DEVICE_TARGET }}
      DEVICE_SUBTARGET: ${{ steps.env.outputs.DEVICE_SUBTARGET }}
      TOOLCHAIN_IMAGE: ${{ steps.env.outputs.TOOLCHAIN_IMAGE }}

    steps:
      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          

      - name: Checkout
        uses: actions/checkout@main

      - name: Clone Source Code
        id: clone
        run: |
          df -hT $PWD
          git clone $SOURCE_URL -b $SOURCE_BRANCH /workdir/lede
          cd /workdir/lede
          echo "OPENWRT_ROOT_PATH=$PWD" >> $GITHUB_ENV
          echo "::set-output name=OPENWRT_ROOT_PATH::$(echo $PWD)"

      - name: Generate Variables
        id: env
        run: |
          export CURRENT_BRANCH="$(git symbolic-ref --short HEAD)"
          echo "CURRENT_BRANCH=$CURRENT_BRANCH" >> $GITHUB_ENV
          echo "::set-output name=CURRENT_BRANCH::$(echo $CURRENT_BRANCH)"
          cd $OPENWRT_ROOT_PATH
          export SOURCE_OWNER="$(echo $SOURCE_URL | awk -F '/' '{print $(NF-1)}')"
          echo "SOURCE_OWNER=$SOURCE_OWNER" >> $GITHUB_ENV
          echo "::set-output name=SOURCE_OWNER::$(echo $SOURCE_OWNER)"
          export SOURCE_REPO="$(echo $SOURCE_URL | awk -F '/' '{print $(NF)}')"
          echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
          echo "::set-output name=SOURCE_REPO::$(echo $SOURCE_REPO)"
          export DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          echo "::set-output name=DEVICE_TARGET::$(echo $DEVICE_TARGET)"
          export DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
          echo "::set-output name=DEVICE_SUBTARGET::$(echo $DEVICE_SUBTARGET)"
          export DEVICE_PLATFORM=$(cat .config | grep CONFIG_TARGET_ARCH_PACKAGES | awk -F '"' '{print $2}')
          echo "DEVICE_PLATFORM=$DEVICE_PLATFORM" >> $GITHUB_ENV
          echo "::set-output name=DEVICE_PLATFORM::$(echo $DEVICE_PLATFORM)"
          export TOOLCHAIN_IMAGE="toolchain-$SOURCE_OWNER-$SOURCE_REPO-$SOURCE_BRANCH-$DEVICE_TARGET-$DEVICE_SUBTARGET"
          echo "TOOLCHAIN_IMAGE=$TOOLCHAIN_IMAGE" >> $GITHUB_ENV
          echo "::set-output name=TOOLCHAIN_IMAGE::$(echo $TOOLCHAIN_IMAGE)"

      - name: Install Feeds
        if: steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        run: |
          [ -e files ] && mv files $OPENWRT_ROOT_PATH/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRT_ROOT_PATH/.config
          cd $OPENWRT_ROOT_PATH
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          make defconfig

  
      - name: Load Custom Configuration
        run: |
          [ -e files ] && mv files $OPENWRT_ROOT_PATH/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRT_ROOT_PATH/.config
          cat config/general-packages.config >> $OPENWRT_ROOT_PATH/.config
          cat config/extra-drivers.config >> $OPENWRT_ROOT_PATH/.config
          cd $OPENWRT_ROOT_PATH
          chmod +x $GITHUB_WORKSPACE/scripts/*.sh
          $GITHUB_WORKSPACE/$DIY_SH
          $GITHUB_WORKSPACE/scripts/preset-clash-core.sh $CLASH_BINARY_PLATFORM
          $GITHUB_WORKSPACE/scripts/preset-terminal-tools.sh
          make defconfig

      - name: Download DL Package
        id: download
        run: |
          cd $OPENWRT_ROOT_PATH
          make download -j64

      - name: Compile Packages
        run: |
          cd $OPENWRT_ROOT_PATH
          echo -e "$(nproc) thread compile"
          make buildinfo
          make diffconfig buildversion feedsversion
          make  -j$(nproc) || make -j1 V=s
          make package/index

      - name: Generate Firmware
        id: generate
        run: |
          if grep -q $DEVICE_TARGET/$DEVICE_SUBTARGET $GITHUB_WORKSPACE/data/support-targets.txt; then
            mkdir -p $OPENWRT_ROOT_PATH/files/etc/opkg
            cd $OPENWRT_ROOT_PATH/files/etc/opkg
            cp $GITHUB_WORKSPACE/data/opkg/distfeeds.conf .
            sed -i "s/DEVICE_SUBTARGET/$DEVICE_SUBTARGET/g" distfeeds.conf
            sed -i "s/DEVICE_TARGET/$DEVICE_TARGET/g" distfeeds.conf
            sed -i "s/DEVICE_PLATFORM/$DEVICE_PLATFORM/g" distfeeds.conf
            cd $OPENWRT_ROOT_PATH
            git clone https://git.openwrt.org/project/usign.git
            cd usign
            cmake .
            make
            sudo mv usign /bin
            mkdir -p $OPENWRT_ROOT_PATH/files/etc/opkg/keys
            cd $OPENWRT_ROOT_PATH/files/etc/opkg/keys
            wget -q https://openwrt.cc/keys/key-build.pub
            mv key-build.pub $(usign -F -p key-build.pub)
          fi
          cd $OPENWRT_ROOT_PATH
          echo "dtparam=i2c_arm=on,audio=on" >> target/linux/bcm27xx/image/config.txt
          mkdir -p files/etc/uci-defaults/
          cp $GITHUB_WORKSPACE/scripts/init-settings.sh files/etc/uci-defaults/99-init-settings
          mkdir -p files/www/snapshots
          cp -r bin/targets files/www/snapshots
          make package/install -j$(nproc) || make package/install -j1 V=s
          make target/install -j$(nproc) || make target/install -j1 V=s
          make json_overview_image_info
          make checksum

      - name: Print Disk Usage
        if: always()
        run: |
          echo 'lsblk -f'
          lsblk -f
          echo '-----'
          echo 'df -h'
          df -h
          echo '-----'
          echo 'btrfs filesystem usage'
          sudo btrfs filesystem usage $GITHUB_WORKSPACE
          echo '-----'
      - name: Compress Bin Folder
        run: |
          cd $OPENWRT_ROOT_PATH
          zip -r $DEVICE_TARGET-$DEVICE_SUBTARGET.zip bin
          
      - name: Organize Files
        run: |
          export BUILD_DATE=$(date +"%F")
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          cd $OPENWRT_ROOT_PATH/bin/targets/$DEVICE_TARGET/$DEVICE_SUBTARGET
          rm -rf packages
          df -hT $PWD

      - name: Delete Old Firmware Assets
        if: steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ secrets.ACTION_TOKEN }}
          tag: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
          fail-if-no-assets: false
          fail-if-no-release: false
          assets: "*"

      - name: Deploy Files To Release
        uses: ncipollo/release-action@v1.8.0
        if: env.FIRMWARE_RELEASE_UPLOAD == 'true'
        with:
          name: openwrt-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
          allowUpdates: true
          replacesArtifacts: true
          tag: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
          body: ${{ env.BUILD_DATE }}
          commit: ${{ env.CURRENT_BRANCH }}
          token: ${{ secrets.ACTION_TOKEN }}
          artifacts: ${{ env.OPENWRT_ROOT_PATH }}/bin/targets/${{ env.DEVICE_TARGET }}/${{ env.DEVICE_SUBTARGET }}/*
